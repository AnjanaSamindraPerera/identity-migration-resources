DROP PROCEDURE IF EXISTS ALTER_UM_USER;

DELIMITER $$
CREATE PROCEDURE ALTER_UM_USER()
BEGIN
	IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='UM_USER') THEN
	    /* Drop the unique key on (UM_USER_ID,UM_TENANT_ID) with Constraint name UM_USER_ID */
		IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='UM_USER' AND CONSTRAINT_NAME='UM_USER_ID') THEN
			ALTER TABLE `UM_USER` DROP INDEX UM_USER_ID;
		END IF;
		IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='UM_USER' AND CONSTRAINT_NAME='UM_USER_ID') THEN
			ALTER TABLE `UM_USER` ADD UNIQUE(UM_USER_ID);
		END IF;
		IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='UM_USER' AND CONSTRAINT_NAME='UM_USER_NAME') THEN
			ALTER TABLE `UM_USER` ADD UNIQUE(UM_USER_NAME,UM_TENANT_ID);
		END IF;
	END IF;
END $$
DELIMITER ;

CALL ALTER_UM_USER();

CREATE PROCEDURE skip_index_if_exists(indexName varchar(64), tableName varchar(64), tableColumns varchar(255))
BEGIN
    BEGIN
        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN
        END;
        SET @s = CONCAT('CREATE INDEX ', indexName, ' ON ', tableName, tableColumns); PREPARE stmt FROM @s;
        EXECUTE stmt;
    END;
END;

CREATE UNIQUE INDEX INDEX_UM_USERNAME_UM_TENANT_ID ON UM_USER(UM_USER_NAME, UM_TENANT_ID);

DROP PROCEDURE IF EXISTS skip_index_if_exists;

ALTER TABLE UM_TENANT ADD UM_ORG_UUID VARCHAR(36) DEFAULT NULL;
